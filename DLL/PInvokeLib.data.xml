<?xml version="1.0" standalone="yes"?>
<PInvokeLibDS>
  <PIModule>
    <name>Kernel32.dll</name>
    <id>0</id>
  </PIModule>
  <PIModule>
    <name>ShlwAPI.dll</name>
    <id>1</id>
  </PIModule>
  <PIModule>
    <name>User32.dll</name>
    <id>2</id>
  </PIModule>
  <PIModule>
    <name>Gdi32.dll</name>
    <id>4</id>
  </PIModule>
  <PIModule>
    <name>TestLib.dll</name>
    <id>6</id>
  </PIModule>
  <PIType>
    <name>PathAddBackslashW</name>
    <type>0</type>
    <spec>const wchar_t* PathAddBackslashW([In,Out] wchar_t* lpszPath)</spec>
    <info />
    <id_fk>1</id_fk>
  </PIType>
  <PIType>
    <name>PathFileExistsW</name>
    <type>0</type>
    <spec>BOOL PathFileExists(LPCWSTR pszPath)</spec>
    <info />
    <id_fk>1</id_fk>
  </PIType>
  <PIType>
    <name>SleepEx</name>
    <type>0</type>
    <spec>void SleepEx(DWORD dwMilliseconds, BOOL bAlertable)</spec>
    <info />
    <id_fk>0</id_fk>
  </PIType>
  <PIType>
    <name>Sleep</name>
    <type>0</type>
    <spec>void Sleep(DWORD dwMilliseconds)</spec>
    <info>The Sleep function suspends the execution of the current thread for at least the specified interval.</info>
    <id_fk>0</id_fk>
  </PIType>
  <PIType>
    <name>GetSystemColor</name>
    <type>0</type>
    <spec>unsigned long GetSysColor(int nIndex)</spec>
    <info />
    <id_fk>2</id_fk>
  </PIType>
  <PIType>
    <name>GetTextMetrics</name>
    <type>0</type>
    <spec>int GetSystemMetrics(int nIndex)</spec>
    <info>The GetSystemMetrics function retrieves various system metrics (widths and heights of display elements) and system configuration settings. All dimensions retrieved by GetSystemMetrics are in pixels.</info>
    <id_fk>2</id_fk>
  </PIType>
  <PIType>
    <name>GetProcessHandleCount</name>
    <type>0</type>
    <spec>BOOL GetProcessHandleCount(
  HANDLE hProcess,  [Out] DWORD pdwHandleCount)</spec>
    <info />
    <id_fk>0</id_fk>
  </PIType>
  <PIType>
    <name>AttachThreadInput</name>
    <type>0</type>
    <spec>BOOL AttachThreadInput(
  DWORD idAttach,  DWORD idAttachTo,
  BOOL fAttach
)</spec>
    <info>The AttachThreadInput function attaches or detaches the input processing mechanism of one thread to that of another thread.</info>
    <id_fk>2</id_fk>
  </PIType>
  <PIType>
    <name>CreateFontIndirect</name>
    <type>0</type>
    <spec>BOOL CreateFontIndirect(
   [In] LOGFONT lpLogFont 
)</spec>
    <info>Initializes a CFont object with the characteristics given in a LOGFONT structure pointed to by lpLogFont.</info>
    <id_fk>4</id_fk>
  </PIType>
  <PIType>
    <name>DeleteObject</name>
    <type>0</type>
    <spec>BOOL DeleteObject(
  HANDLE hObject
)</spec>
    <info />
    <id_fk>4</id_fk>
  </PIType>
  <PIType>
    <name>TestLib.h</name>
    <type>2</type>
    <spec>/*****************************************************************************
** Sample Test file
******************************************************************************/

// Defines
#define CONSTANT_V1     0x0001
#define CONSTANT_V2     1
#define CONSTANT_V3     CONSTANT_V1

// Prototypes
void Function1(void);
void Function2();

// function with param
void Function3(int x, int y);
void Function4(UINT x, long y);
void Function5(int* x);
void Function6(int x[], int y);

// string parameter
void Function7(char* text, unsigned int size);
void Function8(wchar_t* text, unsigned int size);
void Function9(const char* text, unsigned int size);
void Function10(const wchar_t* text, unsigned int size);

// return value
int  Function11();
int  Function12(void);
double Function13(const char* label, int len);
const wchar_t* Function14(wchar_t* buffer, int size, const char* text, int len);

// passing arrays
long Function15(double points[], int numpoints);

// Structures
struct STRUCT1 {
  int size;
  int buffer[80];
};

struct STRUCT2
{
  unsigned int size;
  unsigned char buffer[128];
};

// struct string type
struct STRUCT3
{
  int  size;
  const char buffer[80];
};

typedef struct STRUCT4_
{
  int size;
} STRUCT4;
</spec>
    <info />
    <id_fk>6</id_fk>
  </PIType>
</PInvokeLibDS>